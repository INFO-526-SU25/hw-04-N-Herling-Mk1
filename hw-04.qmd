---
title: "HW 04"
author: "Nathan Herling"
format:
  html:
    embed-resources: true
    code-fold: true
    code-tools: true
    toc: true
    css: styles.css       # ✅ Add this line to link your CSS
toc: true
---
```{r setup}
#--------------------->
#################
# Package Setup #
#################
#Check if pacman [package manager] is installed, if not install it.
#throw [FYI] alert either way.
if (!requireNamespace("pacman", quietly = TRUE)) {
  message("Installing 'pacman' (not found locally)...")
  install.packages("pacman")
} else {
  message("[FYI]\n'pacman' already installed — skipping install.")
}
# use this line for installing/loading
# pacman::p_load()
# - packages to load stored in a variable (vector)
pkgs <- c(
  "tidyverse",
  "glue",
  "scales",
  "lubridate",
  "patchwork",
  "ggh4x",
  "ggrepel",
  "openintro",
  "ggridges",
  "dsbox",
  "janitor",
  "here",
  "knitr",
  "ggthemes",
  "ggplot2",
  "kableExtra",
  "palmerpenguins",
  "grid",
  "htmltools",
  "plotly",
  "ggforce",
  "cowplot",
  "magick",
  "forcats",
  "stringr",
  "viridis",
  "sf",
  "spdep",
  "tmap",
  "tigris",
  "readxl",
  "gtable",
  "gridExtra"
)


# - load from the character array/vector
pacman::p_load(char=pkgs)

# - install tidyverse/dsbox directly from Git Hub
# - this allows for the possible need to install on a repo. pull.
# - and, if it's already installed just thorw an alert.
if (!requireNamespace("dsbox", quietly = TRUE)) {
  message("Installing 'dsbox' from GitHub (not found locally)...")
  suppressMessages(devtools::install_github("tidyverse/dsbox"))
} else {
  message("[FYI]\n'dsbox' already installed — skipping GitHub install.")
}

# - alert to user packages loaded.
# Set number of columns (adjustable)
n_cols <- 4

# Add * to each package name
pkgs <- paste0("* ", pkgs)

# Calculate number of rows based on total packages
n_rows <- ceiling(length(pkgs) / n_cols)

# Pad with empty strings to complete grid
pkgs_padded <- c(pkgs, rep("", n_rows * n_cols - length(pkgs)))

# Create matrix (fill by row)
pkg_matrix <- matrix(pkgs_padded, nrow = n_rows, byrow = TRUE)

# Print header
cat("The packages loaded:")

# Loop and print each row (use invisible to suppress NULL)
invisible(apply(pkg_matrix, 1, function(row) {
  cat(paste(format(row, width = 22), collapse = ""), "\n")
}))
#-------------------------->
######################
# Basic set Theme up #
######################
# ---- set theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

# set width of code output
options(width = 65)

# set figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7,        # 7" width
  fig.asp = 0.618,      # the golden ratio
  fig.retina = 3,       # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 300             # higher dpi, sharper image
)
## - adding extra for handling graphing...
options(tigris_use_cache = TRUE)

## ---- end theme set up
```


## 1 - A second chance
<div class="question-box">
  <h2>A Second Chance</h2>
  <p>
    Take one of the visualizations from your first project, ideally one you received more feedback on or lost more points on, and improve it. 
  </p>
  <p>
    First, write one sentence reminding us of your project and a few sentences on why you chose this plot and how you plan to improve it. Some of these improvements might be "fixes" for things that were pointed out as missing or incorrect. Some of them might be things you hoped to do before the project deadline but didn't get a chance to. And some might be things you wanted to do in your project but your teammates didn't agree with, so you gave up on them at the time.
  </p>
  <h3>Notes for Completing This Assignment:</h3>
  <ul>
    <li>You will need to add your data from your project to the <code>data/</code> folder in this assignment. You do not need to also add the data dictionary.</li>
    <li>You will need to copy over any code needed for cleaning/preparing your data for this plot. You can reuse code from your project but note that we will re-evaluate your code as part of the grading for this exercise. This means we might catch something wrong with it that we didn't catch before, so if you spot any errors, make sure to fix them.</li>
    <li>Don't worry about being critical of your own work. Even if you lost no points on the plot, if you think it can be improved, articulate how and why. We will not go back and penalize for any mistakes you might point out that we didn't catch at the time of grading your project. There's no risk to being critical!</li>
  </ul>
</div>

<div class="note-box">
  <b>Reminder:</b> From final project/question 2 - performing a spatial cluster analysis to identify areas in the U.S. where access to plumbing has significantly improved or worsened between 2022 and 2023. First, I loaded and cleaned water insecurity data for both years and ensure the datasets align by matching common geographic identifiers (GEOIDs). Then, I join these data to U.S. county shapefiles and calculate the year-over-year change in the percentage of people lacking plumbing. Using spatial statistics (Local G* or Getis-Ord Gi*), I detected statistically significant clusters — labeling them as hotspots (worsening access) or coldspots (improving access) — and visualized them on a map.
  <br>
</div>





```{r}
#| label: label-me-1-a
#| message: false
#| warning: false
# ────────────────────────────────────────────────
# Hyperparameters
queen_setting <- TRUE
snap_distance <- 20000
z_threshold <- 1.96

# ────────────────────────────────────────────────
# Load and clean data
water_2022_clean <- read.csv(here("data", "water_insecurity_2022.csv")) %>%
  filter(!is.na(percent_lacking_plumbing)) %>%
  mutate(geoid = as.character(geoid))

water_2023_clean <- read.csv(here("data", "water_insecurity_2023.csv")) %>%
  filter(!is.na(percent_lacking_plumbing)) %>%
  mutate(geoid = as.character(geoid))

# Filter to common GEOIDs
common_geoids <- intersect(water_2022_clean$geoid, water_2023_clean$geoid)
water_2022_filtered <- water_2022_clean %>% filter(geoid %in% common_geoids)
water_2023_filtered <- water_2023_clean %>% filter(geoid %in% common_geoids)

# ────────────────────────────────────────────────
# Join to shapefile
counties_sf <- counties(cb = TRUE, year = 2022, class = "sf")

counties_2022 <- counties_sf %>%
  left_join(water_2022_filtered %>%
              select(geoid, percent_lacking_plumbing_2022 = percent_lacking_plumbing),
            by = c("GEOID" = "geoid"))

counties_2023 <- counties_sf %>%
  left_join(water_2023_filtered %>%
              select(geoid, percent_lacking_plumbing),
            by = c("GEOID" = "geoid"))

# ────────────────────────────────────────────────
# Calculate change and project
spatial_data <- counties_2023 %>%
  left_join(counties_2022 %>% st_drop_geometry() %>%
              select(GEOID, percent_lacking_plumbing_2022),
            by = "GEOID") %>%
  mutate(change = percent_lacking_plumbing - percent_lacking_plumbing_2022) %>%
  filter(!is.na(change))

# Project to Albers Equal Area
spatial_data <- st_transform(spatial_data, crs = 5070)

# ────────────────────────────────────────────────
# Create neighbors
nb <- poly2nb(spatial_data, queen = queen_setting, snap = snap_distance)

# Drop areas with no neighbors
no_neighbors <- which(card(nb) == 0)
cat("Number of observations with no neighbors (excluded):", length(no_neighbors), "\n")

if (length(no_neighbors) > 0) {
  spatial_data <- spatial_data[-no_neighbors, ]
  nb <- poly2nb(spatial_data, queen = queen_setting, snap = snap_distance)
}

# Create spatial weights
lw <- nb2listw(nb, style = "W", zero.policy = TRUE)

# Compute Local G* statistic
local_gstar <- localG(spatial_data$change, listw = lw, zero.policy = TRUE)
spatial_data$gstar_z <- as.numeric(local_gstar)

# ────────────────────────────────────────────────
# Classify clusters based on z-score thresholds
spatial_data <- spatial_data %>%
  mutate(cluster_type = case_when(
    gstar_z >=  z_threshold  ~ "Hotspot (Worsening)",
    gstar_z <= -z_threshold  ~ "Coldspot (Improving)",
    TRUE                     ~ "Not Significant"
  ))

# ────────────────────────────────────────────────
# Count clusters for annotation
hotspot_count <- sum(spatial_data$cluster_type == "Hotspot (Worsening)")
coldspot_count <- sum(spatial_data$cluster_type == "Coldspot (Improving)")

# ────────────────────────────────────────────────
# Define function for rounded rectangle polygon (simple rectangle here, radius param currently unused)
rounded_rect <- function(x, y, width, height, radius = 10){
  coords <- matrix(c(
    x,           y,
    x + width,   y,
    x + width,   y + height,
    x,           y + height,
    x,           y
  ), ncol = 2, byrow = TRUE)
  st_polygon(list(coords))
}

# ────────────────────────────────────────────────
# Set tmap mode and create the final plot
tmap_mode("plot")  # ensure static plotting mode

# Calculate bounding box of spatial_data for positioning annotation
bbox <- st_bbox(spatial_data)

# Base position and size for annotation box & text (adjust as needed to move box)
# Adjusted position and size for annotation box & text
x_pos <- bbox["xmin"] + (bbox["xmax"] - bbox["xmin"]) * 0.50  # moved left from 0.80 to 0.65 (smaller fraction)
y_pos <- bbox["ymin"] + (bbox["ymax"] - bbox["ymin"]) * -0.13  # slightly lower vertical start to keep bottom margin
box_width <- (bbox["xmax"] - bbox["xmin"]) * 0.2              # keep same width
box_height <- (bbox["ymax"] - bbox["ymin"]) * 0.18            # increased height (was 0.1)

# Create the annotation box polygon
annot_box <- st_sfc(rounded_rect(x_pos, y_pos, box_width, box_height), crs = st_crs(spatial_data))

# Adjust text point position with some padding inside the bigger box
annot_text_point <- st_sfc(
  st_point(c(x_pos + box_width * 0.45, y_pos + box_height * 0.50)),  # - move the text rel. to the box.
  crs = st_crs(spatial_data)
)


# Build sf objects for box and text
annot_box_sf <- st_sf(
  type = "box",
  label = NA_character_,
  geometry = annot_box
)

annot_text_sf <- st_sf(
  type = "text",
  label = paste0("Hotspots: ", hotspot_count, "\nColdspots: ", coldspot_count),
  geometry = annot_text_point
)

# Combine for easy plotting
annot_sf <- rbind(annot_box_sf, annot_text_sf)

# ────────────────────────────────────────────────
# Compose tmap
g1 <- tm_shape(spatial_data) +
  tm_polygons("cluster_type",
              fill.scale = tm_scale(values = c(
                "Hotspot (Worsening)"   = "#DC143C",
                "Coldspot (Improving)"  = "#1ad3d1",
                "Not Significant"       = "grey95"),
                legend.title = "Plumbing Access Change Clusters")) +
  tm_title("Spatial Clustering of Plumbing Access Changes (2022–2023)", size = 1.2) +

  # Add annotation box (polygon)
  tm_shape(annot_sf %>% filter(type == "box")) +
  tm_polygons(col = "#ffffff", alpha = 0.8, border.col = "#333333", lwd = 1.2, legend.show = FALSE) +

  # Add annotation text
  tm_shape(annot_sf %>% filter(type == "text")) +
  tm_text("label", size = 0.7, just = c("left", "bottom"), col = "black") +

  tm_credits(
    paste0(
      "Local G* Statistic (z ≥ ±", z_threshold, ")\n",
      "Contiguity = ", ifelse(queen_setting, "Queen", "Rook"),
      " | Snap Distance = ", snap_distance, " meters"
    ),
    position = c("center", "top"),
    size = 0.7,
    lines = 2
  ) +
  tm_layout(
    legend.position = c("left", "bottom"),
    legend.just = "right",
    legend.outside = FALSE,
    legend.text.size = 0.6,
    legend.title.size = 0.75,
    inner.margins = c(0.2, 0.02, 0.12, 0.02)
  )

print(g1)



```
<div class="note-box2">
  <b>mk_1:</b><br>
  <p>The desired fixes/updates for this would be to:</p>
  <ul>
    <li>Add a border to the US states (adding all counties yields too much visual clutter).</li>
    <li>Move counts to the cluster_type legend.</li>
    <li>Use improved or alternative color schemes for better visual presentation.</li>
  </ul>
</div>


```{r}
#| label: label-me-1-b
#| message: false
#| warning: false


# ────────────────────────────────────────────────
# Hyperparameters
queen_setting <- TRUE
snap_distance <- 20000
z_threshold <- 1.96

# ────────────────────────────────────────────────
# Load and clean data
water_2022_clean <- read.csv(here("data", "water_insecurity_2022.csv")) %>%
  filter(!is.na(percent_lacking_plumbing)) %>%
  mutate(geoid = as.character(geoid))

water_2023_clean <- read.csv(here("data", "water_insecurity_2023.csv")) %>%
  filter(!is.na(percent_lacking_plumbing)) %>%
  mutate(geoid = as.character(geoid))

# Filter to common GEOIDs
common_geoids <- intersect(water_2022_clean$geoid, water_2023_clean$geoid)
water_2022_filtered <- water_2022_clean %>% filter(geoid %in% common_geoids)
water_2023_filtered <- water_2023_clean %>% filter(geoid %in% common_geoids)

# ────────────────────────────────────────────────
# Join to shapefile
counties_sf <- counties(cb = TRUE, year = 2022, class = "sf")

# Filter to continental US counties (exclude AK '02', HI '15', PR '72', etc.)
continental_states <- setdiff(unique(counties_sf$STATEFP), c("02", "15", "72"))
counties_sf_continental <- counties_sf %>%
  filter(STATEFP %in% continental_states)

total_counties_continental <- nrow(counties_sf_continental)

counties_2022 <- counties_sf_continental %>%
  left_join(water_2022_filtered %>%
              select(geoid, percent_lacking_plumbing_2022 = percent_lacking_plumbing),
            by = c("GEOID" = "geoid"))

counties_2023 <- counties_sf_continental %>%
  left_join(water_2023_filtered %>%
              select(geoid, percent_lacking_plumbing),
            by = c("GEOID" = "geoid"))

# ────────────────────────────────────────────────
# Calculate change and project
spatial_data <- counties_2023 %>%
  left_join(counties_2022 %>% st_drop_geometry() %>%
              select(GEOID, percent_lacking_plumbing_2022),
            by = "GEOID") %>%
  mutate(change = percent_lacking_plumbing - percent_lacking_plumbing_2022) %>%
  filter(!is.na(change))

# Project to Albers Equal Area
spatial_data <- st_transform(spatial_data, crs = 5070)

# ────────────────────────────────────────────────
# Create neighbors
nb <- poly2nb(spatial_data, queen = queen_setting, snap = snap_distance)

# Identify and exclude counties with no neighbors
no_neighbors <- which(card(nb) == 0)
num_no_neighbors <- length(no_neighbors)

if (num_no_neighbors > 0) {
  spatial_data <- spatial_data[-no_neighbors, ]
  nb <- poly2nb(spatial_data, queen = queen_setting, snap = snap_distance)
}

# Total counties analyzed after exclusions
total_analyzed <- nrow(spatial_data)

# ────────────────────────────────────────────────
# Print alert summary
cat(
  "Summary:\n",
  "Total counties in continental US: ", total_counties_continental, "\n",
  "Counties excluded due to missing neighbors: ", num_no_neighbors, "\n",
  "Total counties analyzed: ", total_analyzed, "\n"
)

# ────────────────────────────────────────────────
# Create spatial weights
lw <- nb2listw(nb, style = "W", zero.policy = TRUE)

# Compute Local G* statistic
local_gstar <- localG(spatial_data$change, listw = lw, zero.policy = TRUE)
spatial_data$gstar_z <- as.numeric(local_gstar)

# ────────────────────────────────────────────────
# Classify clusters based on z-score thresholds
spatial_data <- spatial_data %>%
  mutate(cluster_type = case_when(
    gstar_z >=  z_threshold  ~ "Hotspot (Worsening)",
    gstar_z <= -z_threshold  ~ "Coldspot (Improving)",
    TRUE                     ~ "Not Significant"
  ))

# ────────────────────────────────────────────────
# Count clusters for annotation and update labels
cluster_counts <- spatial_data %>%
  count(cluster_type) %>%
  complete(cluster_type = c("Hotspot (Worsening)", "Coldspot (Improving)", "Not Significant"), fill = list(n = 0))

cluster_labels <- cluster_counts %>%
  mutate(label = paste0(cluster_type, " [n=", n, "]")) %>%
  arrange(factor(cluster_type, levels = c("Hotspot (Worsening)", "Coldspot (Improving)", "Not Significant"))) %>%
  pull(label)

# Update cluster_type to factor with counts in labels
spatial_data$cluster_type <- factor(spatial_data$cluster_type,
                                    levels = c("Hotspot (Worsening)", "Coldspot (Improving)", "Not Significant"),
                                    labels = cluster_labels)

# ────────────────────────────────────────────────
# Set tmap mode and create the final plot
tmap_mode("plot")

cluster_colors <- c(
  "#FDE725FF",
  "#21908CFF",
  "#440154FF"
)
names(cluster_colors) <- cluster_labels

# ────────────────────────────────────────────────
# Get state boundaries for overlay
states_sf <- states(cb = TRUE, year = 2022, class = "sf") %>%
  filter(STATEFP %in% continental_states) %>%
  st_transform(crs = st_crs(spatial_data))  # match CRS with spatial_data

# ────────────────────────────────────────────────
# Add overlay to existing plot
g1 <- tm_shape(spatial_data) +
  tm_polygons("cluster_type",
              fill.scale = tm_scale(values = cluster_colors,
                                    legend.title = "Plumbing Access Change Clusters")) +
  tm_shape(states_sf) +  # overlay begins here
  tm_borders(lwd = 1.2, col = "black") +
  tm_title("Spatial Clustering of Plumbing Access Changes (2022–2023)", size = 1.2) +
  tm_credits(
    paste0(
      "Local G* Statistic (z ≥ ±", z_threshold, ")\n",
      "Contiguity = ", ifelse(queen_setting, "Queen", "Rook"),
      " | Snap Distance = ", snap_distance, " meters"
    ),
    position = c("center", "top"),
    size = 0.7,
    lines = 2
  ) +
  tm_layout(
    legend.position = c("left", "bottom"),
    legend.just = "right",
    legend.outside = FALSE,
    legend.text.size = 0.6,
    legend.title.size = 0.75,
    inner.margins = c(0.2, 0.02, 0.12, 0.02)
  )

print(g1)

```
<div class="note-box2">
  <b>mk_1:</b><br>
  <p>The desired fixes/updates rendered:</p>
  <ul>
    <li>Add a border to the US states (adding all counties yields too much visual clutter).</li>
    <li>Move counts to the cluster_type legend.</li>
    <li>Use improved or alternative color schemes for better visual presentation.</li>
  </ul>
</div>



## 2.  Arizona state of counties
<div class="question-box">
<p><strong>Arizona state of counties.</strong> Using the <code>tigris</code> package, download the shapefile for counties in the state of Arizona (AZ) for the year 2021. Cache the code chunk where this action is done so the shapefile isn’t downloaded each time you render.</p>

<p>Then, in a separate code chunk, plot the county boundaries and label them. The word “County” should be omitted from the labels to keep them shorter. Appropriate labels should be used, including a caption that mentions the data source, and the figure should be sized such that all labels are visible. It's okay if your labels are not placed in the exact same locations as the provided figure.</p>

<p><strong>Hint:</strong> When downloading the shapefile, set <code>progress_bar = FALSE</code> so that the progress bar isn’t printed in your rendered document.</p>

</div>
```{r}
#| label: label-me-2
#| cache: true
#| message: false
#| warning: false
#| fig.cap: "County boundaries for Arizona, 2021. Data source: US Census Bureau TIGER/Line Shapefiles."
#| fig.width: 8
#| fig.height: 6


# Get tigris version for caption
tigris_version <- as.character(packageVersion("tigris"))

# Download Arizona counties shapefile for 2021 (cached)
az_counties <- counties(state = "AZ", year = 2021, progress_bar = FALSE) %>%
  st_as_sf()

# Remove "County" from labels and get centroids for labeling
az_counties <- az_counties %>%
  mutate(
    label = gsub(" County$", "", NAME),
    lon = st_coordinates(st_centroid(geometry))[,1],
    lat = st_coordinates(st_centroid(geometry))[,2]
  )

# Build caption text with version
caption_text <- paste0("Source: Shapefile obtained using {tigris} R package, v", tigris_version)

# Plot all counties with the same grey fill and repel labels in white boxes
g1 <- ggplot(az_counties) +
  geom_sf(fill = "grey90", color = "black") +  # all counties same grey fill
  geom_label_repel(
    aes(x = lon, y = lat, label = label),
    size = 3.5,
    box.padding = 0.5,
    point.padding = 0.5,
    force = 2.1,
    segment.color = "black",
    segment.size = 0.3,
    fill = "white",
    color = "black",
    label.colour = "black",
    label.size = 0.3,
    label.r = unit(0.15, "lines")
  ) +
  labs(
    title = "Counties in Arizona State",
    x = "Longitude",
    y = "Latitude",
    caption = caption_text
  ) +
  theme_minimal() +
  theme(
    axis.title.y = element_text(angle = 90, vjust = 0.5),
    plot.margin = margin(t = 5, r = 5, b = 25, l = 5),  # extra bottom margin for caption
    plot.caption = element_text(size = 8, hjust = 1, color = "gray40")
  )

# Print the plot
print(g1)

```

## 3.  Arizona state of population change
<div class="question-box">
Arizona state of population change. TL;DR: Reproduce the figure below. But you’re going to want to read more…

Next, fill in the color of the counties based on total population change from 2021 to 2022 using a diverging RdBu color palette. In order to do this, you will need to merge in the Excel file called co-est2023-pop-04.xlsx from your data folder to the shape file you loaded in the previous exercise. The Excel file is formatted such that there are merged cells on top that you don’t need as well as extraneous informational text at the bottom, so you will need to make use of additional arguments to the read_excel() package to skip some rows on top, limit the number of rows being read in, and label the columns appropriately. Label the column you will use for this analysis total_pop_change_20_23; note that this is variable name will then be reflected in the title of the legend in your figure by default, so change it accordingly. Do not label the counties so that we can see the map and the fill colors better, but do use appropriate labels should, including a caption that mentions the data sources, and use an appropriate aspect ratio and size for your figure.

Hint: There are 15 counties in <s>New York</s> Arizona.
</div>


```{r, results = 'hide'}
#| label: label-me-3

# ----------------------------------------
# Set tigris options and version
# ----------------------------------------
options(tigris_use_cache = TRUE)
tigris_version <- as.character(packageVersion("tigris"))

# ----------------------------------------
# Step 1: Load and prepare Arizona counties shapefile
# ----------------------------------------
az_counties <- counties(state = "AZ", year = 2021, progress_bar = FALSE) %>%
  st_as_sf() %>%
  mutate(
    NAME = gsub(" County$", "", NAME),
    NAME = str_trim(NAME)  # Trim whitespace for safety
  )

# ----------------------------------------
# Step 2: Load population data with proper skipping and renaming
# ----------------------------------------
pop_data_raw <- suppressMessages(suppressWarnings(
  read_excel(
    "data/co-est2023-pop-04.xlsx",
    skip = 5,
    n_max = 15,
    col_names = FALSE
  )
))

# Assign column names manually based on inspected data:
# Columns include county_raw and population estimates from 2020 to 2023
colnames(pop_data_raw) <- c(
  "county_raw", "code1", "est_2020", "est_2021", "est_2022", "est_2023"
)

# Clean and compute population change (2021-2022 based on est_2023 - est_2020)
pop_data <- pop_data_raw %>%
  mutate(
    NAME = county_raw %>%
      str_remove_all("^\\.") %>%                    # Remove leading dot
      str_remove_all(" County, Arizona$") %>%       # Remove suffix
      str_trim(),                                   # Trim spaces
    total_pop_change_21_22 = est_2023 - est_2020
  ) %>%
  select(NAME, total_pop_change_21_22)

# ----------------------------------------
# Step 3: Check for mismatches in county names (optional)
# ----------------------------------------
cat("Counties in shapefile but NOT in pop_data:\n")
print(setdiff(az_counties$NAME, pop_data$NAME))

cat("\nCounties in pop_data but NOT in shapefile:\n")
print(setdiff(pop_data$NAME, az_counties$NAME))

# ----------------------------------------
# Step 4: Merge population data with spatial data
# ----------------------------------------
az_counties_merged <- az_counties %>%
  left_join(pop_data, by = "NAME")

# ----------------------------------------
# Step 5: Print counties and population changes to terminal (optional)
# ----------------------------------------
for(i in seq_len(nrow(az_counties_merged))) {
  cat(
    sprintf(
      "county name: '%-15s', population change: '%s'\n",
      az_counties_merged$NAME[i],
      ifelse(is.na(az_counties_merged$total_pop_change_21_22[i]), "NA", az_counties_merged$total_pop_change_21_22[i])
    )
  )
}

# ----------------------------------------
# Step 6: Plot population change map with continuous custom gradient
# ----------------------------------------

pop_min <- abs(min(az_counties_merged$total_pop_change_21_22, na.rm = TRUE))
pop_max <- max(az_counties_merged$total_pop_change_21_22, na.rm = TRUE)

# Define your color anchors and corresponding population values
# - these are hardcoded and not spread across an even interval
# - in an attempt to match the given color scheme.
color_values <- c(
  -887,
  -159,
  141,
  1446,
  2412,
  7562,
  9497,
  11864,
  17987,
  54052,
  140812
)

color_hex <- c(
  "#2166ac",  # Deep blue
  "#296baf",
  "#2569ae",
  "#2b6caf",
  "#2f6fb1",
  "#3f7db9",
  "#4583bb",
  "#4c89bf",
  "#5b9bc8",
  "#deebf2",
  "#b2182b"   # Deep red
)

# Calculate dynamic min and max from data (absolute min for negatives)
pop_min <- abs(min(az_counties_merged$total_pop_change_21_22, na.rm = TRUE))
pop_max <- max(az_counties_merged$total_pop_change_21_22, na.rm = TRUE)

# Normalize color anchors from range [-pop_min, pop_max] to [0,1]
norm_values <- scales::rescale(
  color_values,
  from = c(-pop_min, pop_max),
  to = c(0, 1)
)

# Create plot with continuous gradient
g3 <- ggplot(az_counties_merged) +
  geom_sf(aes(fill = total_pop_change_21_22), color = "white") +
  scale_fill_gradientn(
    colors = color_hex,
    values = norm_values,
    limits = c(-pop_min, pop_max),
    name = "Population Change",
    labels = scales::comma,
    oob = scales::squish  # clamp out-of-bounds to limits
  ) +
  labs(
    title = "Resident Population Change for Counties in AZ",
    subtitle = "July 01, 2020 to July 01, 2023",
    x = "Longitude",
    y = "Latitude",
    caption = paste0(
      "Sources: Shapefile obtained using {tigris} R package (v", tigris_version, ")\n",
      "population change data from the US Census Bureau"
    )
  ) +
  theme_minimal() +
  theme(
      legend.position = "right",
      axis.title = element_text(size = 10),
      axis.text = element_text(size = 8),
      plot.caption = element_text(size = 8, hjust = 1, color = "gray40"),
      plot.margin = margin(t = 5, r = 5, b = 25, l = 20),  # increase left margin
      plot.title = element_text(hjust = 0, margin = margin(r = 20, l = -40)),
      plot.subtitle = element_text(hjust = 0, margin = margin(r = 20, l = -40))
    ) +
  coord_sf()

print(g3)

```

## 4.  Arizona state of Indiginous Tribal Regions
<div class="question-box">
<b>Arizona state of Indiginous Tribal Regions.</b> TL;DR: Reproduce the figure below. But you’re going to want to read more…

Arizona is home to 22 federally recognized tribes, including 17 reservations that cross several AZ counties.. These regions are given in the shapefiles in your data folder (use American_Indian_Reservations_in_Arizona.shp). Standardize the shapefile with the AZ counties one (hint: rh crs code is 4269). Then, create a new sf object that has the boundaries of the tribal regions that overlays the sf() layer for you created in the previous exercise, using a thicker line (linewidth = 1) to indicate indigenous region boundaries. It's ok if your labels are not placed in the exact same locations as the provided figure.
</div>

```{r, message=FALSE}
#| label: label-me-4


# ----------------------------
# Load and Prepare Arizona Counties
# ----------------------------
az_counties <- counties(state = "AZ", year = 2021, progress_bar = FALSE) %>%
  st_as_sf() %>%
  st_transform(crs = 4269) %>%
  mutate(
    label = str_remove(NAME, " County$"),
    lon = st_coordinates(st_centroid(geometry))[, 1],
    lat = st_coordinates(st_centroid(geometry))[, 2]
  )

# Union of all counties to create state outline
state_poly <- st_union(az_counties)

# ----------------------------
# Load and Prepare Tribal Reservations
# ----------------------------
tribal <- st_read(here("data", "American_Indian_Reservations_in_Arizona.shp"), quiet = TRUE) %>%
  st_transform(crs = 4269) %>%
  mutate(NAME_norm = str_replace_all(NAME, "[’']", "'"))

# Define tribes to force labels for
forced_includes <- c(
  "San Carlos Apache Tribe",
  "Hopi Tribe",
  "Navajo Nation",
  "Tohono O'odham Nation",
  "White Mountain Apache Tribe"
)

# Filter selected tribes and compute centroids
forced_labels <- tribal %>%
  filter(tolower(NAME_norm) %in% tolower(forced_includes)) %>%
  mutate(
    lon = st_coordinates(st_centroid(geometry))[, 1],
    lat = st_coordinates(st_centroid(geometry))[, 2]
  )

# ----------------------------
# Create Tribal vs. Non-Tribal Geometry
# ----------------------------
tribal_union_all <- st_union(tribal)
state_non_tribal <- st_difference(state_poly, tribal_union_all)

# ----------------------------
# Build and Name the Plot
# ----------------------------
caption_text <- paste(
  "Source: Shapefile obtained using {tigris} R package, v2.0.1",
  "Indigenous Tribe Shapefile obtained from AZGeo Data",
  sep = "\n"
)

g1 <- ggplot() +
  # Non-tribal land (background)
  geom_sf(data = state_non_tribal, fill = "grey95", color = NA) +

  # County boundaries drawn FIRST (go under tribal land)
  geom_sf(data = az_counties, fill = NA, color = "white", linewidth = 0.6) +

  # Tribal areas with solid fill and black edges (on top of counties)
  geom_sf(data = tribal, fill = "grey70", color = "black", linewidth = 1.0) +

  # State outline
  #geom_sf(data = state_poly, fill = NA, color = "white", linewidth = 0.6) +

  # Tribe labels
  geom_label_repel(
    data = forced_labels,
    aes(x = lon, y = lat, label = NAME),
    size = 3.5,
    box.padding = 0.5,
    point.padding = 0.5,
    force = 10,
    max.overlaps = Inf,
    segment.color = "black",
    segment.size = 0.8,
    fill = "white",
    color = "black",
    label.r = unit(0.15, "lines"),
    nudge_x = 0.25,    # longitude nudge (adjust as needed)
    nudge_y = 0.25     # latitude nudge (adjust as needed)
  ) +

  coord_sf(clip = "off") +
  labs(
    title = "Indigenous Tribal Boundaries in AZ",
    x = "Longitude",
    y = "Latitude",
    caption = caption_text
  ) +
  theme_minimal() +
  theme(
    plot.margin = margin(10, 10, 10, 10),
    axis.title.y = element_text(angle = 90, vjust = 0.5),
    plot.caption = element_text(size = 8, hjust = 1, color = "gray40"),
    plot.title = element_text(hjust = 0, margin = margin(l = -30))
  )

# ----------------------------
# Render the Plot
# ----------------------------
print(g1)

```





## 5. Arizona state of patchwork
<div class="question-box">
<b>Arizona state of patchwork.</b> TL;DR: Reproduce the figure below. But you’re going to want to read more…

What we’re seeing is that what is happening in some Arizona counties is very different than the rest of Arizona State, which is probably not too surprising given urban vs rural populations. We also have too many potantial tribal regions to get clear ideas of which tribes are in the most populous regions of Arizona. åSo, let’s make it a bit easier to see each of the counties in Arizona by insetting a zoomed-in version of that portion of the map. It's ok if your labels are not placed in the exact same locations as the provided figure.
</div>

<div class="note-box2">
  <b>Note:</b><br>This is rendering different as just an 'R' file.
  I'll take any points I can get - many salients are present, although the lat/long lines are refusing to render.
</div>
```{r, echo=FALSE, warning=FALSE, message=FALSE}
#| label: label-me-5

# -------------------------
# Fixed longitude and latitude limits
# -------------------------
x_limits <- c(-122, -110)
y_limits <- c(30, 36)

# -------------------------
# Prepare label data for specific counties
# -------------------------
label_counties <- az_counties_merged %>%
  filter(NAME %in% c("Maricopa", "Pima", "Pinal")) %>%
  st_centroid() %>%
  mutate(
    lon = st_coordinates(.)[,1],
    lat = st_coordinates(.)[,2]
  )

# -------------------------
# Load and Prepare Tribal Reservations
# -------------------------
tribal <- st_read(here("data", "American_Indian_Reservations_in_Arizona.shp"), quiet = TRUE) %>%
  st_transform(crs = 4269) %>%
  mutate(NAME_norm = str_replace_all(NAME, "[’']", "'"))

# -------------------------
# Filter Tribal Reservations intersecting inset zoom limits
# -------------------------
inset_bbox <- st_as_sfc(st_bbox(c(xmin = x_limits[1], xmax = x_limits[2],
                                  ymin = y_limits[1], ymax = y_limits[2]), crs = st_crs(4269)))
tribal_inset <- tribal %>%
  st_intersection(inset_bbox)

# -------------------------
# Prepare tribal labels for inset
# -------------------------
forced_labels <- tribal %>%
  filter(
    str_detect(NAME_norm, regex("White Mountain Apache Tribe|San Carlos Apache Tribe|Tohono", ignore_case = TRUE)),
    !str_detect(NAME_norm, "Off-Reservation")  # <-- EXCLUDE off-reservation
  ) %>%
  mutate(
    lon = st_coordinates(st_centroid(geometry))[, 1],
    lat = st_coordinates(st_centroid(geometry))[, 2]
  )

tribal_labels <- forced_labels

# -------------------------
# Main AZ Map (Simplified)
# -------------------------
main_map <- ggplot(az_counties_merged) +
  geom_sf(aes(fill = total_pop_change_21_22), color = NA) +
  scale_fill_gradientn(
    colors = color_hex,
    values = norm_values,
    limits = c(-pop_min, pop_max),
    name = "Population Change",
    labels = comma,
    oob = scales::squish
  ) +
  geom_label_repel(
    data = label_counties,
    aes(x = lon, y = lat, label = NAME),
    size = 3.5,
    fontface = "bold",
    color = "black",
    fill = alpha("white", 0.7),
    box.padding = 0.4,
    point.padding = 0.5,
    segment.color = "grey50",
    min.segment.length = 0
  ) +
  coord_sf(xlim = x_limits, ylim = y_limits, expand = TRUE, clip = "off") +
  theme_void() +
  theme(
    panel.border = element_blank(),
    panel.background = element_blank(),
    plot.background = element_blank(),
    legend.position = "none",
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.title = element_blank()
  )
main_grob <- ggplotGrob(main_map)

# -------------------------
# Inset Map (county zoom)
# -------------------------
inset_map <- ggplot() +
  geom_sf(data = az_counties_merged, aes(fill = total_pop_change_21_22), color = NA) +
  scale_fill_gradientn(
    colors = color_hex,
    values = norm_values,
    limits = c(-pop_min, pop_max),
    labels = comma,
    oob = scales::squish,
    guide = "none"
  ) +
  geom_sf(data = tribal_inset, fill = NA, color = "black", linewidth = 0.7) +
  geom_label_repel(
    data = tribal_labels,
    aes(x = lon, y = lat, label = NAME),
    size = 3.2,
    fontface = "bold",
    color = "black",
    fill = alpha("white", 0.8),
    box.padding = 0.4,
    point.padding = 0.4,
    segment.color = "grey40"
  ) +
  coord_sf(xlim = x_limits, ylim = y_limits, expand = TRUE, clip = "on") +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "grey90", color = NA),
    plot.background = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.title = element_blank()
  )

inset_grob <- ggplotGrob(inset_map)

# -------------------------
# Legend Construction
# -------------------------
legend_plot <- ggplot(az_counties_merged) +
  geom_sf(aes(fill = total_pop_change_21_22)) +
  scale_fill_gradientn(
    colors = color_hex,
    values = norm_values,
    limits = c(0, 100000),
    name = NULL,
    breaks = c(0, 50000, 100000),
    labels = comma,
    guide = guide_colorbar(
      direction = "horizontal",
      ticks.colour = "black"
    )
  ) +
  coord_sf(expand = FALSE) +
  theme_void() +
  theme(legend.position = "right")

legend_raw <- cowplot::get_legend(legend_plot)
padded_legend <- gtable_add_padding(legend_raw, padding = unit(c(5, 5, 5, 5), "pt"))

legend_title_grob <- textGrob(
  "Population Change",
  rot = 0,
  gp = gpar(fontsize = 10, fontface = "bold"),
  y = unit(-3, "npc")
)

combined_legend_grob <- arrangeGrob(
  legend_title_grob,
  padded_legend,
  ncol = 1,
  heights = unit.c(unit(0.2, "cm"), unit(1, "null"))
)

legend_grob <- ggplotGrob(ggdraw() + draw_grob(combined_legend_grob))

# -------------------------
# Final Composite Layout w/ Lines from Pima to Inset
# -------------------------
# Get Pima centroid
pima_coords <- label_counties %>%
  filter(NAME == "Pima") %>%
  select(lon, lat)

# Dashed line segments from Pima to inset corners (manual canvas overlay)
connector_lines <- ggdraw() +
  geom_segment(
    aes(x = pima_coords$lon, y = pima_coords$lat,
        xend = -122, yend = 36),
    color = "grey40", linetype = "dashed", linewidth = 0.4
  ) +
  geom_segment(
    aes(x = pima_coords$lon, y = pima_coords$lat,
        xend = -122, yend = 30),
    color = "grey40", linetype = "dashed", linewidth = 0.4
  )

# ---- lines
# Southwest Arizona (roughly, based on visual alignment in canvas units)
sw1 <- data.frame(x = 0.35, y = 0.45, xend = 0.75, yend = 0.55)
sw2 <- data.frame(x = 0.45, y = 0.15, xend = 0.85, yend = 0.45)

final_plot <- ggdraw() +
  draw_plot(main_grob,   x = 0.35, y = 0.3,  width = 0.60, height = 0.60) +
  draw_plot(legend_grob, x = 0.10, y = 0.65, width = 0.25, height = 0.25) +
  draw_plot(inset_grob,  x = 0.00, y = 0.03, width = 0.45, height = 0.45) +

  # New lines from southwest
  draw_line(x = c(sw1$x, sw1$xend), y = c(sw1$y, sw1$yend),
            color = "black", size = 0.5, linetype = "dashed") +
  draw_line(x = c(sw2$x, sw2$xend), y = c(sw2$y, sw2$yend),
            color = "black", size = 0.5, linetype = "dashed")


# -------------------------
# Render Plot
# -------------------------
print(final_plot)
```

